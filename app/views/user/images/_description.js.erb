var description_image = document.getElementById("description_image");
var file_input = document.getElementById('file_input');
var textContent = "<%= "Q." + title + 'KAIGYOSTR' + text.gsub(/\r\n/,'KAIGYOSTR')%>";
textContent = textContent.replace(/\s/g, "");


textContent = textContent.replace(/KAIGYOSTR/g, '</br>');
//textContent += "<div style='text-align: right;'>from <%=user_name%></div>"
//句読点ごとに配列に分割する
punctuations = ['、','。','，','．','！','？','!','?'];
strMark = '<replace string>'
punctuations.forEach(function(element){
  var pattern = new RegExp('[' + element + ']', 'g');
  textContent = textContent.replace(pattern, `${element}${strMark}`);
});

sentences = textContent.split(strMark);

//だいたい25字になるように配列を結合
var newSentences = [];
var sentenceUnit = '';
for(i=0; i<sentences.length; i++){
  newLastSentence = newSentences.slice(-1)[0] + sentences[i];
  if(newLastSentence.length > 22 || newSentences.length == 0){
    newSentences.push(sentences[i]);
  }else{
    newSentences[newSentences.length-1] += sentences[i];
  }
}

//配列の中で文字列が</br>で始まる場合削除
newSentences = newSentences.map(str => str.startsWith('</br>') ? str.slice(5) : str);
var newTextContent = newSentences.join('</br>')
textContent = textContent.replace(/KAIGYOSTR/g, '</br>');
$("#message_area").html(newTextContent);
$("#message_area").html(textContent);

var now = new Date();
var year = now.getFullYear();
var month = now.getMonth();
var date = now.getDate();
var hour = now.getHours();
var min = now.getMinutes();
var sec = now.getSeconds();
var datetime = `${year}${month}${date}${hour}${min}${sec}`;

extension = 'jpg'
async function create_description_image() {
	//$("#display_setting").css("display", "block");
	document.getElementById("submit").disabled = true; // 送信ボタン無効化
	
	var targetElement = document.querySelector("#canvas-box");
	const formData = new FormData();
	const totalHeight = targetElement.scrollHeight;
	const viewportHeight = 500;
	const scaleFactor = window.devicePixelRatio || 1
	const chunks = [];
	
	let offset = 0;
  
	while (offset < totalHeight) {
	  // 対象エリアをスクロールして描画
	  targetElement.scrollTop = offset;
  
	  const canvas = await html2canvas(targetElement, {
			height: viewportHeight,  // 分割エリアの高さ
			width: targetElement.scrollWidth,
			y: offset  // オフセット
	  });
		console.log(canvas)
  
	  chunks.push(canvas);
	  offset += viewportHeight;
	}
  
	// 各チャンクを1つのキャンバスに統合
	const combinedCanvas = document.createElement("canvas");
	combinedCanvas.width = targetElement.clientWidth*scaleFactor;
	combinedCanvas.height = targetElement.clientHeight*scaleFactor;
	const ctx = combinedCanvas.getContext("2d");
  
	offset = 0;
	chunks.forEach((chunkCanvas) => {
	  ctx.drawImage(chunkCanvas, 0, offset);
	  offset += chunkCanvas.height;
		document.getElementById("canvas-container").appendChild(chunkCanvas);
	});
  //document.getElementById("canvas-container").appendChild(combinedCanvas);
	// 結合されたキャンバスをBlobに変換し、画像として使用
	var imageBlob = combinedCanvas.toBlob((blob) => {
	  formData.append("request[file]", blob, `description_image_${datetime}.${extension}`);
	  const file = new File([blob], `description_image_${datetime}.${extension}`, { type: `image/${extension}` });
	  const dt = new DataTransfer();
	  dt.items.add(file);
	  file_input.files = dt.files; // 送信フォームにDataTransferを挿入
	  description_image.src = URL.createObjectURL(blob); // 画像要素にblobを挿入
	  document.getElementById("submit").disabled = false; // 送信ボタン有効化
	});
	$("#desctiption_to_image_text").css("display","none");
	//$("#display_setting").css("display","none");
  //$("#canvas").css("display","none");

	//以下はダウンロードさせる場合のコード
  //var blob = canvas.toBlob(function(){}, `image/${extension}`, 0.95);
  //let downloadEle = document.createElement("a"); //ダウンロードする要素作成
  //downloadEle.href = canvas.toDataURL(`image/${extension}`);
  //downloadEle.download = `canvas.${extension}`;
  //downloadEle.click(); //ダウンロードさせる場合
  }